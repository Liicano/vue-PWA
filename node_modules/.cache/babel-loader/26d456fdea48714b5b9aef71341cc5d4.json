{"remainingRequest":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js!/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/desarrollo/Escritorio/unabasev4/src/pages/Dashboard/Maps/GoogleMaps.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/desarrollo/Escritorio/unabasev4/src/pages/Dashboard/Maps/GoogleMaps.vue","mtime":1548876225939},{"path":"/home/desarrollo/Escritorio/unabasev4/.babelrc","mtime":1547153504905},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport isMobile from '../../../assets/js/isMobile.js';\nexport default {\n  name: 'GoogleMap',\n  props: {\n    initial: null,\n    res_name: null,\n    res_second_level: null\n  },\n  data: function data() {\n    return {\n      // default to Montreal to keep it simple\n      center: {\n        lat: null,\n        lng: null\n      },\n      markers: [],\n      places: [],\n      currentPlace: null,\n      isMobile: isMobile,\n      show: true,\n      addressValue: null,\n      currentAddress: {\n        principal: null,\n        secondary: null\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.geolocate();\n    this.getInitialValue();\n    console.log('this.addressValue -> ', this.addressValue);\n    console.log('this.initial -> ', this.initial);\n  },\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace: function setPlace(place) {\n      console.log(place);\n      this.currentPlace = place;\n    },\n    addMarker: function addMarker(current) {\n      if (this.currentPlace) {\n        var marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({\n          position: marker\n        });\n        this.places.push(this.currentPlace);\n        this.center = marker; // this.currentPlace = null;\n      }\n    },\n    geolocate: function geolocate() {\n      var _this = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n    getInitialValue: function getInitialValue() {\n      if (this.addressValue != null) {\n        this.currentAddress.principal = this.addressValue[0] + ', ' + this.addressValue[1];\n        this.currentAddress.secondary = this.addressValue[2] + ', ' + this.addressValue[3];\n      } else {\n        if (this.initial != null) {\n          this.address = this.initial.split(',');\n          console.log(this.address);\n          this.currentAddress.principal = this.address[0] + ', ' + this.address[1];\n          this.currentAddress.secondary = this.address[2] + ', ' + this.address[3];\n        }\n      }\n    }\n  },\n  watch: {\n    currentPlace: function currentPlace(val) {\n      this.addressValue = val.formatted_address.split(',');\n      this.addMarker();\n      this.getInitialValue();\n      this.$emit('setAddress', {\n        name: this.res_name,\n        second_level: this.res_second_level,\n        value: val.formatted_address\n      });\n    }\n  }\n};",{"version":3,"sources":["GoogleMaps.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,OAAA,QAAA,MAAA,gCAAA;AAEA,eAAA;AACA,QAAA,WADA;AAEA,SAAA;AACA,aAAA,IADA;AAEA,cAAA,IAFA;AAGA,sBAAA;AAHA,GAFA;AAOA,MAPA,kBAOA;AACA,WAAA;AACA;AACA,cAAA;AAAA,aAAA,IAAA;AAAA,aAAA;AAAA,OAFA;AAGA,eAAA,EAHA;AAIA,cAAA,EAJA;AAKA,oBAAA,IALA;AAMA,gBAAA,QANA;AAOA,YAAA,IAPA;AAQA,oBAAA,IARA;AASA,sBAAA;AACA,mBAAA,IADA;AAEA,mBAAA;AAFA;AATA,KAAA;AAcA,GAtBA;AAwBA,SAxBA,qBAwBA;AACA,SAAA,SAAA;AACA,SAAA,eAAA;AACA,YAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,YAAA;AACA,YAAA,GAAA,CAAA,kBAAA,EAAA,KAAA,OAAA;AACA,GA7BA;AA+BA,WAAA;AACA;AACA,YAFA,oBAEA,KAFA,EAEA;AACA,cAAA,GAAA,CAAA,KAAA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,KALA;AAMA,aANA,qBAMA,OANA,EAMA;AACA,UAAA,KAAA,YAAA,EAAA;AACA,YAAA,SAAA;AACA,eAAA,KAAA,YAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,EADA;AAEA,eAAA,KAAA,YAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA;AAFA,SAAA;AAKA,aAAA,OAAA,CAAA,IAAA,CAAA;AAAA,oBAAA;AAAA,SAAA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,KAAA,YAAA;AACA,aAAA,MAAA,GAAA,MAAA,CARA,CASA;AACA;AACA,KAlBA;AAmBA,eAAA,qBAAA;AAAA;;AACA,gBAAA,WAAA,CAAA,kBAAA,CAAA,oBAAA;AACA,cAAA,MAAA,GAAA;AACA,eAAA,SAAA,MAAA,CAAA,QADA;AAEA,eAAA,SAAA,MAAA,CAAA;AAFA,SAAA;AAIA,OALA;AAMA,KA1BA;AA4BA,mBA5BA,6BA4BA;AACA,UAAA,KAAA,YAAA,IAAA,IAAA,EAAA;AACA,aAAA,cAAA,CAAA,SAAA,GACA,KAAA,YAAA,CAAA,CAAA,IAAA,IAAA,GAAA,KAAA,YAAA,CAAA,CAAA,CADA;AAEA,aAAA,cAAA,CAAA,SAAA,GACA,KAAA,YAAA,CAAA,CAAA,IAAA,IAAA,GAAA,KAAA,YAAA,CAAA,CAAA,CADA;AAEA,OALA,MAKA;AACA,YAAA,KAAA,OAAA,IAAA,IAAA,EAAA;AACA,eAAA,OAAA,GAAA,KAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,kBAAA,GAAA,CAAA,KAAA,OAAA;AAEA,eAAA,cAAA,CAAA,SAAA,GACA,KAAA,OAAA,CAAA,CAAA,IAAA,IAAA,GAAA,KAAA,OAAA,CAAA,CAAA,CADA;AAEA,eAAA,cAAA,CAAA,SAAA,GACA,KAAA,OAAA,CAAA,CAAA,IAAA,IAAA,GAAA,KAAA,OAAA,CAAA,CAAA,CADA;AAEA;AACA;AACA;AA7CA,GA/BA;AA8EA,SAAA;AACA,kBAAA,sBAAA,GAAA,EAAA;AACA,WAAA,YAAA,GAAA,IAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,WAAA,SAAA;AACA,WAAA,eAAA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA;AACA,cAAA,KAAA,QADA;AAEA,sBAAA,KAAA,gBAFA;AAGA,eAAA,IAAA;AAHA,OAAA;AAKA;AAVA;AA9EA,CAAA","sourcesContent":["<template>\n  <div>\n    <!-- <div>\n      <label>\n        <gmap-autocomplete @place_changed=\"setPlace\"></gmap-autocomplete>\n        <button class=\"green btn btn-success\" @click=\"addMarker\">Add</button>\n      </label>\n      <br>\n    </div>\n    <br>-->\n    <v-card>\n      <gmap-map :center=\"center\" :zoom=\"12\" style=\"width:100%;  height: 200px;\">\n        <gmap-marker\n          :key=\"index\"\n          v-for=\"(m, index) in markers\"\n          :position=\"m.position\"\n          @click=\"center=m.position\"\n        ></gmap-marker>\n      </gmap-map>\n      <v-card-title primary-title>\n        <div>\n          <div class=\"headline\">{{currentAddress.principal}}</div>\n          <span class=\"grey--text\">{{currentAddress.secondary}}</span>\n        </div>\n      </v-card-title>\n\n      <v-card-actions></v-card-actions>\n\n      <v-slide-y-transition>\n        <v-card-text v-show=\"show\">\n          <div class=\"md-layout\">\n            <div class=\"md-layout-item md-size-80 md-small-size-100\">\n              <gmap-autocomplete @place_changed=\"setPlace\"></gmap-autocomplete>\n            </div>\n\n            <div class=\"md-layout-item md-size-20\"></div>\n          </div>\n        </v-card-text>\n      </v-slide-y-transition>\n    </v-card>\n  </div>\n</template>\n\n<script>\nimport isMobile from '../../../assets/js/isMobile.js';\n\nexport default {\n  name: 'GoogleMap',\n  props: {\n    initial: null,\n    res_name: null,\n    res_second_level: null\n  },\n  data() {\n    return {\n      // default to Montreal to keep it simple\n      center: { lat: null, lng: null },\n      markers: [],\n      places: [],\n      currentPlace: null,\n      isMobile: isMobile,\n      show: true,\n      addressValue: null,\n      currentAddress: {\n        principal: null,\n        secondary: null\n      }\n    };\n  },\n\n  mounted() {\n    this.geolocate();\n    this.getInitialValue();\n    console.log('this.addressValue -> ', this.addressValue);\n    console.log('this.initial -> ', this.initial);\n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n      console.log(place);\n      this.currentPlace = place;\n    },\n    addMarker(current) {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n\n        this.markers.push({ position: marker });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        // this.currentPlace = null;\n      }\n    },\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n\n    getInitialValue() {\n      if (this.addressValue != null) {\n        this.currentAddress.principal =\n          this.addressValue[0] + ', ' + this.addressValue[1];\n        this.currentAddress.secondary =\n          this.addressValue[2] + ', ' + this.addressValue[3];\n      } else {\n        if (this.initial != null) {\n          this.address = this.initial.split(',');\n          console.log(this.address);\n\n          this.currentAddress.principal =\n            this.address[0] + ', ' + this.address[1];\n          this.currentAddress.secondary =\n            this.address[2] + ', ' + this.address[3];\n        }\n      }\n    }\n  },\n  watch: {\n    currentPlace: function(val) {\n      this.addressValue = val.formatted_address.split(',');\n      this.addMarker();\n      this.getInitialValue();\n      this.$emit('setAddress', {\n        name: this.res_name,\n        second_level: this.res_second_level,\n        value: val.formatted_address\n      });\n    }\n  }\n};\n</script>"],"sourceRoot":"src/pages/Dashboard/Maps"}]}