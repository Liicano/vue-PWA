{"remainingRequest":"/home/desarrollo/Escritorio/unabasev4/node_modules/thread-loader/dist/cjs.js!/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js!/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/desarrollo/Escritorio/unabasev4/src/pages/Dashboard/Components/new_contact.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/desarrollo/Escritorio/unabasev4/src/pages/Dashboard/Components/new_contact.vue","mtime":1550158198895},{"path":"/home/desarrollo/Escritorio/unabasev4/.babelrc","mtime":1547153504905},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/home/desarrollo/Escritorio/unabasev4/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions, mapState, mapMutations } from 'vuex';\nexport default {\n  components: {},\n  data: function data() {\n    return {\n      contact_img: null,\n      loading: false,\n      userName: ''\n    };\n  },\n  mounted: function mounted() {\n    if (this.validateEmail(this.getContact.name) == true) {\n      this.userName = this.getContact.name;\n      this.newContact({\n        name: 'email',\n        value: this.userName\n      });\n    } else {\n      this.userName = '';\n    }\n  },\n  methods: _objectSpread({}, mapActions({\n    postContact: 'contacts/postContact',\n    findContact: 'contacts/findContact'\n  }), mapMutations({\n    setContact: 'contacts/SET_CONTACT'\n  }), {\n    newContact: function newContact(c) {\n      var obj = {\n        attr: c.name,\n        value: c.value\n      };\n      this.setContact(obj);\n    },\n    getContactUser: function getContactUser() {\n      var _this = this;\n\n      this.loading = true;\n      this.findContact(this.getContact.email).then(function (res) {\n        _this.loading = false;\n        _this.contact_img = res.imgUrl;\n        console.log(res);\n      });\n    },\n    validateEmail: function validateEmail(email) {\n      var re = /\\S+@\\S+\\.\\S+/;\n      return re.test(email);\n    }\n  }),\n  computed: _objectSpread({}, mapGetters({\n    getUser: 'users/user',\n    getContact: 'contacts/getContact'\n  }))\n};",{"version":3,"sources":["new_contact.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,SAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA,YAAA,QAAA,MAAA;AAEA,eAAA;AACA,cAAA,EADA;AAGA,MAHA,kBAGA;AACA,WAAA;AACA,mBAAA,IADA;AAEA,eAAA,KAFA;AAGA,gBAAA;AAHA,KAAA;AAKA,GATA;AAWA,SAXA,qBAWA;AACA,QAAA,KAAA,aAAA,CAAA,KAAA,UAAA,CAAA,IAAA,KAAA,IAAA,EAAA;AACA,WAAA,QAAA,GAAA,KAAA,UAAA,CAAA,IAAA;AACA,WAAA,UAAA,CAAA;AAAA,cAAA,OAAA;AAAA,eAAA,KAAA;AAAA,OAAA;AACA,KAHA,MAGA;AACA,WAAA,QAAA,GAAA,EAAA;AACA;AACA,GAlBA;AAmBA,6BACA,WAAA;AACA,iBAAA,sBADA;AAEA,iBAAA;AAFA,GAAA,CADA,EAKA,aAAA;AACA,gBAAA;AADA,GAAA,CALA;AASA,cATA,sBASA,CATA,EASA;AACA,UAAA,MAAA;AACA,cAAA,EAAA,IADA;AAEA,eAAA,EAAA;AAFA,OAAA;AAKA,WAAA,UAAA,CAAA,GAAA;AACA,KAhBA;AAkBA,kBAlBA,4BAkBA;AAAA;;AACA,WAAA,OAAA,GAAA,IAAA;AACA,WAAA,WAAA,CAAA,KAAA,UAAA,CAAA,KAAA,EAAA,IAAA,CAAA,eAAA;AACA,cAAA,OAAA,GAAA,KAAA;AAEA,cAAA,WAAA,GAAA,IAAA,MAAA;AACA,gBAAA,GAAA,CAAA,GAAA;AACA,OALA;AAMA,KA1BA;AA2BA,iBA3BA,yBA2BA,KA3BA,EA2BA;AACA,UAAA,KAAA,cAAA;AACA,aAAA,GAAA,IAAA,CAAA,KAAA,CAAA;AACA;AA9BA,IAnBA;AAmDA,8BACA,WAAA;AACA,aAAA,YADA;AAEA,gBAAA;AAFA,GAAA,CADA;AAnDA,CAAA","sourcesContent":["<template>\n  <div>\n    <div class=\"md-layout\">\n      <div class=\"md-layout-item md-size-100\">\n        <center>\n          <h3>{{(getContact.name)}}</h3>\n        </center>\n      </div>\n    </div>\n\n    <br>\n    <small></small>\n    <md-divider></md-divider>\n    <br>\n    <div class=\"md-layout\">\n      <div class=\"md-layout-item md-size-80\">\n        <md-field>\n          <label>Email</label>\n          <md-input\n            type=\"email\"\n            name=\"email\"\n            :value=\"userName\"\n            @input.native=\"newContact($event.target);\"\n            @blur=\"getContactUser()\"\n          ></md-input>\n        </md-field>\n      </div>\n\n      <div class=\"md-layout-item md-size-20 valign-wrapper\">\n        <center>\n          <md-avatar>\n            <img v-if=\"contact_img != null && !loading\" :src=\"contact_img\" alt=\"Avatar\">\n            <img\n              v-if=\"contact_img == null && !loading\"\n              src=\"../../../../public/img/default-avatar.png\"\n              alt=\"Avatar\"\n            >\n          </md-avatar>\n        </center>\n      </div>\n    </div>\n    <br>\n    <center>\n      <small>รณ</small>\n    </center>\n    <div class=\"md-layout\">\n      <div class=\"md-layout-item md-size-100\">\n        <md-field>\n          <label>Telefono</label>\n          <md-input type=\"text\" name=\"phone\" @input.native=\"newContact($event.target)\"></md-input>\n        </md-field>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters, mapActions, mapState, mapMutations } from 'vuex';\n\nexport default {\n  components: {},\n\n  data() {\n    return {\n      contact_img: null,\n      loading: false,\n      userName: ''\n    };\n  },\n\n  mounted() {\n    if (this.validateEmail(this.getContact.name) == true) {\n      this.userName = this.getContact.name;\n      this.newContact({ name: 'email', value: this.userName });\n    } else {\n      this.userName = '';\n    }\n  },\n  methods: {\n    ...mapActions({\n      postContact: 'contacts/postContact',\n      findContact: 'contacts/findContact'\n    }),\n    ...mapMutations({\n      setContact: 'contacts/SET_CONTACT'\n    }),\n\n    newContact(c) {\n      let obj = {\n        attr: c.name,\n        value: c.value\n      };\n\n      this.setContact(obj);\n    },\n\n    getContactUser() {\n      this.loading = true;\n      this.findContact(this.getContact.email).then(res => {\n        this.loading = false;\n\n        this.contact_img = res.imgUrl;\n        console.log(res);\n      });\n    },\n    validateEmail(email) {\n      var re = /\\S+@\\S+\\.\\S+/;\n      return re.test(email);\n    }\n  },\n  computed: {\n    ...mapGetters({\n      getUser: 'users/user',\n      getContact: 'contacts/getContact'\n    })\n  }\n};\n</script>\n<style>\n</style>\n"],"sourceRoot":"src/pages/Dashboard/Components"}]}