{"remainingRequest":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js!/home/desarrollo/Escritorio/unabasev4/node_modules/eslint-loader/index.js??ref--13-0!/home/desarrollo/Escritorio/unabasev4/src/store/modules/business.js","dependencies":[{"path":"/home/desarrollo/Escritorio/unabasev4/src/store/modules/business.js","mtime":1549638780804},{"path":"/home/desarrollo/Escritorio/unabasev4/.babelrc","mtime":1547153504905},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/home/desarrollo/Escritorio/unabasev4/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.function.name\";\nimport axios from 'axios';\nimport api from '../../lib/api';\nexport default {\n  namespaced: true,\n  state: {\n    phone: {\n      phone: '',\n      label: ''\n    },\n    email: {\n      email: '',\n      label: ''\n    },\n    company: {\n      idNumber: '',\n      legalName: '',\n      name: '',\n      website: '',\n      admins: [],\n      phones: [],\n      emails: [],\n      address: {},\n      businessType: []\n    },\n    business: []\n  },\n  mutations: {\n    SET_BUSINESS: function SET_BUSINESS(state, payload) {\n      state.business = payload;\n    },\n    SET_COMPANY: function SET_COMPANY(state, payload) {\n      if (payload.attr) {\n        if (payload.second_level) {\n          state.company[payload.attr][payload.second_level] = payload.value;\n        } else {\n          state.company[payload.attr] = payload.value;\n        }\n      } else {\n        state.company = payload;\n      }\n    },\n    // ADD_COMPANY(state, payload) {\n    //   state.business.push(payload)\n    // },\n    ADD_OBJECT: function ADD_OBJECT(state, payload) {\n      var obj = {\n        name: payload.name,\n        number: payload.number\n      };\n      state.company[payload.attr].push(obj);\n    },\n    ADD_PHONE: function ADD_PHONE(state, payload) {\n      state.company.phones.push({\n        phone: payload.phone,\n        label: payload.label\n      });\n    },\n    DELETE_PHONE: function DELETE_PHONE(state, payload) {\n      var index = state.company.phones.indexOf(payload);\n      state.company.phones.splice(index, 1);\n    },\n    UPDATE_PHONE: function UPDATE_PHONE(state, payload) {\n      if (payload.attr) {\n        state.phone[payload.attr] = payload.value;\n      } else {\n        state.phone = payload;\n      }\n    },\n    UPDATE_EMAIL: function UPDATE_EMAIL(state, payload) {\n      if (payload.attr) {\n        state.email[payload.attr] = payload.value;\n      } else {\n        state.email = payload;\n      }\n    },\n    ADD_EMAIL: function ADD_EMAIL(state, payload) {\n      state.company.emails.push({\n        email: payload.email,\n        label: payload.label\n      });\n    },\n    DELETE_EMAIL: function DELETE_EMAIL(state, payload) {\n      var index = state.company.emails.indexOf(payload);\n      state.company.emails.splice(index, 1);\n    },\n    SET_ADDRESS: function SET_ADDRESS(state, payload) {\n      if (payload.attr) {\n        state.company.address[payload.attr] = payload.value;\n      } else {\n        state.company.address = payload;\n      }\n    },\n    CLEAN_COMPANY: function CLEAN_COMPANY(state) {\n      state.company = {\n        idNumber: '',\n        legalName: '',\n        name: '',\n        website: '',\n        admins: [],\n        phones: [],\n        emails: [],\n        address: {},\n        businessType: []\n      };\n    }\n  },\n  actions: {\n    getAllBusiness: function getAllBusiness(_ref, payload) {\n      var commit = _ref.commit;\n      return new _Promise(function (resolve, reject) {\n        axios.get(api + '/business?isActive=true').then(function (data) {\n          commit('SET_BUSINESS', data.data);\n          console.log(data);\n          resolve(data.data);\n        }).catch(function (err) {\n          reject(err, err.response);\n        });\n      });\n    },\n    getCompany: function getCompany(_ref2, payload) {\n      var commit = _ref2.commit;\n      return new _Promise(function (resolve, reject) {\n        axios.get(api + '/business/' + payload).then(function (data) {\n          commit('SET_COMPANY', data.data);\n          resolve(data.data);\n          console.log(data.data);\n        }).catch(function (err) {\n          reject(err, err.response);\n        });\n      });\n    },\n    postCompany: function postCompany(_ref3, payload) {\n      var commit = _ref3.commit;\n      payload.type = 'business';\n      console.log(\"POST BUSSINESS -> \", payload);\n      return new _Promise(function (resolve, reject) {\n        axios.post(api + '/business/create', payload).then(function (data) {\n          console.log(data.data); // commit('ADD_COMPANY', data.data);\n\n          resolve(data.data);\n        }).catch(function (err) {\n          reject(err, err.response);\n        });\n      });\n    },\n    putCompany: function putCompany(_ref4, payload) {\n      var commit = _ref4.commit;\n      console.log(\"PUT BUSSINESS -> \", payload);\n      return new _Promise(function (resolve, reject) {\n        axios.put(api + '/business/' + payload._id, payload).then(function (data) {\n          console.log(data.data);\n          commit('SET_COMPANY', data.data);\n          resolve(data.data);\n        }).catch(function (err) {\n          reject(err, err.response);\n        });\n      });\n    }\n  },\n  getters: {\n    getBusiness: function getBusiness(state) {\n      return state.business;\n    },\n    getOneCompany: function getOneCompany(state) {\n      return state.company;\n    }\n  }\n};",{"version":3,"sources":["/home/desarrollo/Escritorio/unabasev4/src/store/modules/business.js"],"names":["axios","api","namespaced","state","phone","label","email","company","idNumber","legalName","name","website","admins","phones","emails","address","businessType","business","mutations","SET_BUSINESS","payload","SET_COMPANY","attr","second_level","value","ADD_OBJECT","obj","number","push","ADD_PHONE","DELETE_PHONE","index","indexOf","splice","UPDATE_PHONE","UPDATE_EMAIL","ADD_EMAIL","DELETE_EMAIL","SET_ADDRESS","CLEAN_COMPANY","actions","getAllBusiness","commit","resolve","reject","get","then","data","console","log","catch","err","response","getCompany","postCompany","type","post","putCompany","put","_id","getters","getBusiness","getOneCompany"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport api from '../../lib/api'\n\nexport default {\n  namespaced: true,\n  state: {\n    phone: {\n      phone: '',\n      label: ''\n    },\n    email: {\n      email: '',\n      label: ''\n    },\n    company: {\n      idNumber: '',\n      legalName: '',\n      name: '',\n      website: '',\n      admins: [],\n      phones: [],\n      emails: [],\n      address: {},\n      businessType: []\n    },\n    business: []\n  },\n  mutations: {\n    SET_BUSINESS(state, payload) {\n      state.business = payload;\n    },\n    SET_COMPANY(state, payload) {\n\n      if (payload.attr) {\n        if (payload.second_level) {\n          state.company[payload.attr][payload.second_level] = payload.value;\n        } else {\n          state.company[payload.attr] = payload.value;\n        }\n      } else {\n        state.company = payload;\n      }\n    },\n    // ADD_COMPANY(state, payload) {\n    //   state.business.push(payload)\n    // },\n\n    ADD_OBJECT(state, payload) {\n      let obj = {\n        name: payload.name,\n        number: payload.number\n      }\n      state.company[payload.attr].push(obj)\n    },\n\n    ADD_PHONE(state, payload) {\n      state.company.phones.push({\n        phone: payload.phone,\n        label: payload.label\n      });\n\n    },\n    DELETE_PHONE(state, payload) {\n      let index = state.company.phones.indexOf(payload);\n      state.company.phones.splice(index, 1);\n    },\n    UPDATE_PHONE(state, payload) {\n      if (payload.attr) {\n        state.phone[payload.attr] = payload.value;\n      } else {\n        state.phone = payload;\n      }\n    },\n\n    UPDATE_EMAIL(state, payload) {\n      if (payload.attr) {\n        state.email[payload.attr] = payload.value;\n      } else {\n        state.email = payload;\n      }\n    },\n    ADD_EMAIL(state, payload) {\n      state.company.emails.push({\n        email: payload.email,\n        label: payload.label\n      });\n    },\n    DELETE_EMAIL(state, payload) {\n      let index = state.company.emails.indexOf(payload);\n      state.company.emails.splice(index, 1);\n    },\n\n    SET_ADDRESS(state, payload) {\n      if (payload.attr) {\n        state.company.address[payload.attr] = payload.value;\n      } else {\n        state.company.address = payload;\n      }\n    },\n\n    CLEAN_COMPANY(state) {\n      state.company = {\n        idNumber: '',\n        legalName: '',\n        name: '',\n        website: '',\n        admins: [],\n        phones: [],\n        emails: [],\n        address: {},\n        businessType: []\n      }\n    }\n\n\n\n  },\n  actions: {\n\n    getAllBusiness({\n      commit\n    }, payload) {\n      return new Promise((resolve, reject) => {\n        axios\n          .get(api + '/business?isActive=true')\n          .then(data => {\n            commit('SET_BUSINESS', data.data);\n            console.log(data)\n            resolve(data.data);\n          })\n          .catch(err => {\n            reject(err, err.response);\n          });\n      });\n    },\n\n    getCompany({\n      commit\n    }, payload) {\n      return new Promise((resolve, reject) => {\n        axios\n          .get(api + '/business/' + payload)\n          .then(data => {\n            commit('SET_COMPANY', data.data);\n\n            resolve(data.data);\n            console.log(data.data)\n          })\n          .catch(err => {\n            reject(err, err.response);\n          });\n      });\n    },\n\n    postCompany({\n      commit\n    }, payload) {\n\n      payload.type = 'business'\n      console.log(\"POST BUSSINESS -> \", payload);\n      return new Promise((resolve, reject) => {\n        axios\n          .post(api + '/business/create', payload)\n          .then(data => {\n            console.log(data.data);\n            // commit('ADD_COMPANY', data.data);\n            resolve(data.data);\n          })\n          .catch(err => {\n            reject(err, err.response);\n          });\n      });\n    },\n\n\n    putCompany({\n      commit\n    }, payload) {\n\n      console.log(\"PUT BUSSINESS -> \", payload);\n      return new Promise((resolve, reject) => {\n        axios\n          .put(api + '/business/' + payload._id, payload)\n          .then(data => {\n            console.log(data.data);\n            commit('SET_COMPANY', data.data);\n            resolve(data.data);\n          })\n          .catch(err => {\n            reject(err, err.response);\n          });\n      });\n    },\n\n  },\n  getters: {\n    getBusiness: state => state.business,\n    getOneCompany: state => state.company,\n  }\n};\n"]}]}