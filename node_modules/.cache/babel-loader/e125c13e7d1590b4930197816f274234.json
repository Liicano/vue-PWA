{"remainingRequest":"/home/desarrollo/Escritorio/unabasev4/node_modules/thread-loader/dist/cjs.js!/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js!/home/desarrollo/Escritorio/unabasev4/node_modules/eslint-loader/index.js??ref--13-0!/home/desarrollo/Escritorio/unabasev4/src/components/Wizard/throttle.js","dependencies":[{"path":"/home/desarrollo/Escritorio/unabasev4/src/components/Wizard/throttle.js","mtime":1547153505005},{"path":"/home/desarrollo/Escritorio/unabasev4/.babelrc","mtime":1547153504905},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\n * Simple throttle function that executes a passed function only once in the specified timeout\n * @param handlerFunc\n * @param [timeout] the throttle interval\n */\nexport function throttle(handlerFunc) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 66;\n  var resizeTimeout;\n\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(function () {\n      resizeTimeout = null;\n      handlerFunc(); // The actualResizeHandler will execute at a rate of 15fps\n    }, timeout);\n  }\n}",{"version":3,"sources":["/home/desarrollo/Escritorio/unabasev4/src/components/Wizard/throttle.js"],"names":["throttle","handlerFunc","timeout","resizeTimeout","setTimeout"],"mappings":"AAAA;;;;;AAKA,OAAO,SAASA,QAAT,CAAkBC,WAAlB,EAA6C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAClD,MAAIC,aAAJ;;AACA,MAAI,CAACA,aAAL,EAAoB;AAClBA,oBAAgBC,WAAW,YAAM;AAC/BD,sBAAgB,IAAhB;AACAF,oBAF+B,CAG/B;AACD,KAJe,EAIbC,OAJa,CAAhB;AAKD;AACF","sourcesContent":["/**\n * Simple throttle function that executes a passed function only once in the specified timeout\n * @param handlerFunc\n * @param [timeout] the throttle interval\n */\nexport function throttle(handlerFunc, timeout = 66) {\n  let resizeTimeout;\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(() => {\n      resizeTimeout = null;\n      handlerFunc();\n      // The actualResizeHandler will execute at a rate of 15fps\n    }, timeout);\n  }\n}\n"]}]}