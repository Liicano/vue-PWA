{"remainingRequest":"/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/desarrollo/Escritorio/unabasev4/src/pages/incomes/components/income_form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/desarrollo/Escritorio/unabasev4/src/pages/incomes/components/income_form.vue","mtime":1552582438563},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex';\nimport _ from 'lodash';\n\nimport autocomplete from '../../Dashboard/Components/autocomplete/autocomplete';\nimport money from '../../Dashboard/Components/money';\nimport api from '../../../lib/api';\nimport { ZoomCenterTransition, SlideXRightTransition } from 'vue2-transitions';\n\nimport isMobile from '../../../assets/js/isMobile.js';\n\nexport default {\n  props: {\n    item: {}\n  },\n\n  components: {\n    money,\n    autocomplete,\n    ZoomCenterTransition\n  },\n\n  data() {\n    return {\n      sheet: false,\n      value: '',\n      test: true,\n      bottomShett: false,\n      comments: [],\n      loading: false,\n      isBlock: null,\n      isMobile: null,\n      localQuantity: 0,\n\n      onSelect: false,\n      selectedItems: [],\n      selected: [],\n\n      acomplete: {\n        itemType: 'items',\n        initialValue: '',\n        principalAtribute: 'name',\n        secondaryAtribute: '',\n        optionalMultipleAtribute: '',\n        secondaryQuery: null,\n        placeholder_value: 'Buscar / Crear items...',\n        searchRoute: '',\n        res_name: 'item',\n        optionalInputFunction_res: { 0: 'name' }\n      },\n      optIndex: '',\n      priceSeted: '',\n      currencyScope: {}\n    };\n  },\n\n  created() {\n    // AUTOCOMPLETE CONFIG\n    this.acomplete.searchRoute = api + '/items/find/';\n\n    let params = {\n      parent: this.getItem._id,\n      type: 'item'\n    };\n\n    this.loading = true;\n    if (this.item._id) {\n      this.getAllComments(params).then(res => {\n        this.loading = false;\n      });\n    }\n  },\n  mounted() {\n    this.isMobile = isMobile;\n    this.acomplete.initialValue = this.getItem.name;\n    this.getUserItems().then(res => {});\n    this.localQuantity = !isNaN(this.getItem.quantity)\n      ? this.getItem.quantity\n      : parseInt(this.getItem.quantity);\n\n    this.optIndex = 0;\n  },\n\n  methods: {\n    // ACTIONS\n    ...mapActions({\n      postItem: 'items/postItem',\n      getAllComments: 'comments/getAllComments',\n      postComment: 'comments/postComment',\n      getUserItems: 'items/getUserItems',\n      findItem: 'items/findItem'\n    }),\n    ...mapMutations({\n      setItem: 'items/SET_ITEM',\n      setIncome: 'incomes/SET_INCOME',\n      setComment: 'comments/SET_COMMENT',\n      cleanItem: 'items/CLEAN',\n      setGlobalsCreate: 'items/SET_GLOBALS_CREATE',\n      handleItemDialog: 'HANDLE_ITEM_DIALOG',\n      handleCheckbox: 'items/HANDLE_CHECKBOX',\n      handleSelections: 'items/HANDLE_SELECTIONS'\n    }),\n\n    updateItem(event) {\n      if (this.getSelectedItemsAdd.length > 0) {\n        let obj = {\n          attr: event.name,\n          value: event.value\n        };\n        this.setGlobalsCreate(obj);\n      } else {\n        let obj = {\n          attr: event.name,\n          value: event.value\n        };\n        this.setItem(obj);\n\n        if (event.name == 'item') {\n          // this.sheet = true;\n          this.$toasted.show('¡Seleccionaste ' + event.value.name, {\n            type: 'success'\n          });\n        }\n      }\n    },\n    closeItemDialog() {\n      this.handleItemDialog(false);\n    },\n\n    createItem(term) {\n      if (term != '') {\n        let obj = {\n          name: term\n        };\n        this.postItem(obj).then(res => {\n          this.$toasted.show('¡Item creado con exito!', {\n            type: 'success'\n          });\n          // this.sheet = true;\n        });\n      } else {\n        this.$toasted.show('Debe escribir nombre del item!', {\n          type: 'warning'\n        });\n      }\n    },\n\n    updateComment(event) {\n      this.setComment(event);\n    },\n    newComment() {\n      let params = {\n        parent: this.getItem._id,\n        type: 'item',\n        txt: this.COMMENT\n      };\n      this.postComment(params).then(res => {});\n    },\n    handleItem(index) {\n      this.optIndex = index;\n      this.handleSelections({ var: 'selectedItemsAdd', index: index });\n    },\n\n    changeQuantity(type) {\n      if (this.localQuantity >= 0) {\n        type == 'add'\n          ? (this.localQuantity = this.localQuantity + 1)\n          : (this.localQuantity = this.localQuantity - 1);\n      } else {\n        this.localQuantity = 0;\n      }\n    },\n    setPrice(price) {\n      price == undefined ? '' : price;\n      console.log(price);\n      this.updateItem({ name: 'price', value: price });\n      this.priceSeted = price;\n    }\n  },\n  computed: {\n    ...mapGetters({\n      getItem: 'items/getItem',\n      getIncome: 'incomes/getIncome',\n      getComments: 'comments/getComments',\n      getComment: 'comments/getComment',\n      getIsOutcome: 'getIsOutcome',\n      getUserLastItems: 'items/getUserLastItems',\n      getSelectedItems: 'items/getSelectedItems',\n      getSelectedItemsAdd: 'items/getSelectedItemsAdd',\n      getShowDialogIncome: 'getShowDialogIncome',\n      getGlobalItemVars: ' items/getGlobalItemVars',\n      getCurrencyConfig: 'getCurrencyConfig'\n    }),\n\n    COMMENTS: function(val) {\n      return this.getComments;\n    },\n    COMMENT: function(val) {\n      return this.getComment;\n    },\n\n    PRICES(val) {\n      return {\n        last:\n          this.getUserLastItems.length > 0\n            ? this.getUserLastItems[this.optIndex].lastPrice\n            : 0,\n        stock:\n          this.getUserLastItems.length > 0\n            ? this.getUserLastItems[this.optIndex].price\n            : 0\n      };\n    }\n  },\n\n  watch: {\n    getItem: {\n      handler(val) {\n        this.acomplete.initialValue = val.name;\n      },\n      deep: true\n    },\n    localQuantity: function(val) {\n      let number = val < 0 ? 0 : val;\n\n      if (this.getSelectedItemsAdd.length > 0) {\n        this.setGlobalsCreate({ attr: 'quantity', value: parseInt(number) });\n      } else {\n        this.setItem({\n          attr: 'quantity',\n          value: parseInt(number)\n        });\n      }\n    },\n\n    getSelectedItemsAdd(val) {\n      this.sheet = this.getSelectedItemsAdd.length > 0 ? true : false;\n    }\n  }\n};\n",{"version":3,"sources":["income_form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"income_form.vue","sourceRoot":"src/pages/incomes/components","sourcesContent":["<template>\n  <div>\n    <md-content>\n      <div class=\"md-layout\">\n        <div class=\"md-layout-item md-size-100\" style=\"padding:0\">\n          <md-toolbar\n            class=\"md-success\"\n            style=\"padding-top: 5%;padding-bottom: 0px;\"\n            v-if=\"isMobile\"\n          >\n            <div class=\"md-toolbar-row\" id=\"textField\">\n              <md-button\n                v-if=\"isMobile\"\n                class=\"md-just-icon md-simple md-white\"\n                style=\"padding-right: 25px;margin-top: -5%;\"\n                @click=\"closeItemDialog()\"\n              >\n                <md-icon>arrow_back</md-icon>\n              </md-button>\n\n              <autocomplete\n                style=\"width: 100%;\"\n                @clickOnItem=\"updateItem\"\n                @optionalInputFunction=\"updateItem\"\n                :config=\"acomplete\"\n              ></autocomplete>\n\n              <center>\n                <md-button\n                  @click=\"createItem(getItem.name)\"\n                  class=\"md-just-icon md-simple md-white\"\n                  style=\"padding-left: 25px;margin-top: -40%;\"\n                >\n                  <md-icon>{{(getItem.name != '') ? 'add' : ''}}</md-icon>\n                </md-button>\n              </center>\n            </div>\n          </md-toolbar>\n\n          <div v-else style=\"display:contents;\" id=\"textField\">\n            <div class=\"md-layout\">\n              <div class=\"md-layout-item md-size-80\">\n                <autocomplete\n                  style=\"width: 100%;\"\n                  @clickOnItem=\"updateItem\"\n                  @optionalInputFunction=\"updateItem\"\n                  :config=\"acomplete\"\n                ></autocomplete>\n              </div>\n              <div class=\"md-layout-item md-size-20\">\n                <md-button @click=\"createItem(getItem.name)\" class=\"md-just-icon md-success\">\n                  <md-icon>add</md-icon>\n                </md-button>\n              </div>\n            </div>\n          </div>\n          <v-subheader v-if=\"!isMobile\">Ultimos utilizados</v-subheader>\n          <v-divider v-if=\"!isMobile\"></v-divider>\n        </div>\n        <!-- v-init:currencyScope=\"{symbol:getIncome.currency.prefix,decimalNumber:2, options: {thousandsSeparator:getIncome.currency.thousand,decimalSeparator:getIncome.currency.decimal,spaceBetweenAmountAndSymbol: true} }\" -->\n        <div class=\"md-layout-item md-size-100\" style=\"padding:0\">\n          <v-list>\n            <div style=\"display:contents\" v-if=\"getUserLastItems.length > 0 && isMobile\">\n              <v-list-tile\n                v-for=\"(item, index) in getUserLastItems\"\n                :key=\"item.title\"\n                avatar\n                v-ripple\n                v-init:currencyScope=\"{options: {thousandsSeparator:getIncome.currency.thousand,decimalSeparator:getIncome.currency.decimal,spaceBetweenAmountAndSymbol: true} }\"\n              >\n                <div style=\"display: contents;\">\n                  <v-list-tile-content @click=\"handleItem(index)\">\n                    <v-list-tile-title style=\"color: #424242\">{{item.name | capitalize}}</v-list-tile-title>\n                  </v-list-tile-content>\n\n                  <v-list-tile-action>\n                    <center>\n                      <div class=\"md-layout\">\n                        <div :class=\"['md-layout-item md-size-100']\" style=\"padding: 0\">\n                          <center @click=\"handleItem(index)\">\n                            <zoom-center-transition :duration=\"900\">\n                              <v-icon\n                                v-if=\"getSelectedItemsAdd.indexOf(index) < 0\"\n                                color=\"green\"\n                              >add</v-icon>\n\n                              <v-icon v-else color=\"green\">check_circle</v-icon>\n                            </zoom-center-transition>\n                          </center>\n                        </div>\n                      </div>\n                    </center>\n                  </v-list-tile-action>\n                </div>\n              </v-list-tile>\n            </div>\n            <!-- v-init:currencyScope=\"{symbol:getIncome.currency.prefix,decimalNumber:2, options: {thousandsSeparator:getIncome.currency.thousand,decimalSeparator:getIncome.currency.decimal,spaceBetweenAmountAndSymbol: true} }\" -->\n            <div style=\"display:contents\" v-if=\"getUserLastItems.length > 0 && !isMobile\">\n              <div\n                style=\"display:contents;\"\n                v-for=\"(item, index) in getUserLastItems\"\n                :key=\"item.title\"\n                v-init:currencyScope=\"{options: {thousandsSeparator:getIncome.currency.thousand,decimalSeparator:getIncome.currency.decimal,spaceBetweenAmountAndSymbol: true} }\"\n              >\n                <v-chip\n                  color=\"white\"\n                  style=\"box-shadow: 1px 1px grey;\"\n                  v-if=\"getSelectedItemsAdd.indexOf(index) < 0\"\n                  @click=\"handleItem(index)\"\n                >\n                  <strong>{{item.name}}</strong>&nbsp;\n                  <span>{{item.lastPrice | currency(getIncome.currency.prefix, getIncome.currency.precision, currencyScope.options)}}</span>\n                </v-chip>\n\n                <v-chip v-else color=\"green\" text-color=\"white\" @click=\"handleItem(index)\">\n                  <v-avatar class=\"green darken-4\">\n                    <v-icon>check</v-icon>\n                  </v-avatar>\n                  <strong>{{item.name}}</strong>&nbsp;\n                  <span>{{item.lastPrice | currency(getIncome.currency.prefix, getIncome.currency.precision, currencyScope.options)}}</span>\n                </v-chip>\n              </div>\n            </div>\n\n            <div v-if=\"getUserLastItems.length <= 0\">\n              <md-empty-state\n                class=\"md-success\"\n                md-icon=\"add_shopping_cart\"\n                md-label=\"Aun no tienes items\"\n                md-description=\"Crea un item colocando su nombre y presionando el simbolo de ( + ) de la barra de navegacion.\"\n              ></md-empty-state>\n            </div>\n          </v-list>\n        </div>\n\n        <div class=\"md-layout-item md-size-100\">\n          <!-- <v-bottom-sheet inset hide-overlay persistent v-model=\"sheet\">\n            <v-card tile>\n              <div class=\"md-layout\">\n                <div class=\"md-layout-item md-size-50\"></div>\n                <div class=\"md-layout-item md-size-50\">\n                  <v-btn\n                      flat\n                      icon\n                      color=\"green darken-1\"\n                      class=\"pull-right\"\n                      @click=\"sheet = !sheet\"\n                    >\n                      <v-icon>save</v-icon>\n                  </v-btn>\n                  <v-subheader v-if=\"!isMobile\" class=\"pull-right green--text\">AGREGAR LINEA +</v-subheader>\n                </div>\n              </div>\n\n              <div class=\"md-layout\">\n                <div\n                  class=\"md-layout-item md-size-100\"\n                  style=\"padding:0\"\n                  v-if=\"getSelectedItemsAdd.length == 1 || getItem.item\"\n                >\n                  <center>\n                    <div class=\"md-layout\">\n                      <div class=\"md-layout-item md-size-100\" style=\"padding:0\">\n                        <center>\n                          <v-list>\n                            <v-subheader v-if=\"getItem.item\">{{getItem.name | uppercase}}</v-subheader>\n                            <br>\n                            <v-list-tile color=\"red\">\n                              <br>\n\n                              <v-layout align-center justify-center row fill-height>\n                                <v-flex xs6 @click=\"setPrice(PRICES.last)\" style=\"cursor:pointer\">\n                                  <small class=\"body-1 grey--text\">Ultima venta</small>\n                                  <br>\n                                  <p\n                                    class=\"body-2 blue--text\"\n                                  >{{(PRICES.last) ? PRICES.last : 0 | currency}}</p>\n                                </v-flex>\n\n                                <v-flex xs6 @click=\"setPrice(PRICES.stock)\" style=\"cursor:pointer\">\n                                  <small class=\"body-1 grey--text\">En catalogo</small>\n                                  <br>\n                                  <p\n                                    class=\"body-2 green--text\"\n                                  >{{(PRICES.stock) ? PRICES.stock : 0 | currency}}</p>\n                                </v-flex>\n                              </v-layout>\n                            </v-list-tile>\n                          </v-list>\n                          <v-divider></v-divider>\n                          <br>\n                          <v-list>\n                           \n                            <v-list-tile>\n                              <v-layout justify-center fill-height>\n                                <v-flex xs6 id=\"textField\">\n                                  <v-text-field\n                                    name=\"price\"\n                                    @input.native=\"updateItem($event.target)\"\n                                    type=\"number\"\n                                    label=\"Precio\"\n                                    solo\n                                    v-model=\"priceSeted\"\n                                  ></v-text-field>\n                                </v-flex>\n\n                                <v-flex xs6>\n                                  <v-layout>\n                                    <v-flex xs4>\n                                      <v-btn\n                                        icon\n                                        color=\"red white--text\"\n                                        @click=\"changeQuantity('remove')\"\n                                      >\n                                        <v-icon>remove</v-icon>\n                                      </v-btn>\n                                    </v-flex>\n                                    <v-flex xs4 id=\"textField\">\n                                      <v-text-field\n                                        @input.native=\"updateItem($event.target)\"\n                                        name=\"quantity\"\n                                        type=\"number\"\n                                        label=\"#\"\n                                        min=\"0\"\n                                        v-model=\"localQuantity\"\n                                        solo\n                                      ></v-text-field>\n                                    </v-flex>\n                                    <v-flex xs4>\n                                      <v-btn\n                                        icon\n                                        color=\"green white--text\"\n                                        @click=\"changeQuantity('add')\"\n                                      >\n                                        <v-icon>add</v-icon>\n                                      </v-btn>\n                                    </v-flex>\n                                  </v-layout>\n                                </v-flex>\n                              </v-layout>\n                            </v-list-tile>\n                          </v-list>\n                        </center>\n                      </div>\n                    </div>\n                  </center>\n                </div>\n               \n                <div class=\"md-layout-item md-size-100\" v-else>\n                  <br>\n                  <v-layout>\n                    <v-flex xs12 justify-center>\n                      <v-list>\n                        <v-list-tile>\n                          <v-layout align-center justify-center row fill-height>\n                            <v-flex xs4>\n                              <v-btn\n                                class=\"pull-right\"\n                                icon\n                                color=\"red white--text\"\n                                @click=\"changeQuantity('remove')\"\n                              >\n                                <v-icon>remove</v-icon>\n                              </v-btn>\n                            </v-flex>\n                            <v-flex xs4 id=\"textField\">\n                              <v-text-field\n                                @input.native=\"updateItem($event.target)\"\n                                name=\"quantity\"\n                                type=\"number\"\n                                label=\"#\"\n                                min=\"0\"\n                                v-model=\"localQuantity\"\n                                solo\n                              ></v-text-field>\n                            </v-flex>\n                            <v-flex xs4>\n                              <v-btn icon color=\"green white--text\" @click=\"changeQuantity('add')\">\n                                <v-icon>add</v-icon>\n                              </v-btn>\n                            </v-flex>\n                          </v-layout>\n                        </v-list-tile>\n                      </v-list>\n                    </v-flex>\n                  </v-layout>\n                </div>\n                \n              </div>\n            </v-card>\n          </v-bottom-sheet>-->\n        </div>\n      </div>\n    </md-content>\n  </div>\n</template>\n<script>\nimport { mapActions, mapGetters, mapMutations, mapState } from 'vuex';\nimport _ from 'lodash';\n\nimport autocomplete from '../../Dashboard/Components/autocomplete/autocomplete';\nimport money from '../../Dashboard/Components/money';\nimport api from '../../../lib/api';\nimport { ZoomCenterTransition, SlideXRightTransition } from 'vue2-transitions';\n\nimport isMobile from '../../../assets/js/isMobile.js';\n\nexport default {\n  props: {\n    item: {}\n  },\n\n  components: {\n    money,\n    autocomplete,\n    ZoomCenterTransition\n  },\n\n  data() {\n    return {\n      sheet: false,\n      value: '',\n      test: true,\n      bottomShett: false,\n      comments: [],\n      loading: false,\n      isBlock: null,\n      isMobile: null,\n      localQuantity: 0,\n\n      onSelect: false,\n      selectedItems: [],\n      selected: [],\n\n      acomplete: {\n        itemType: 'items',\n        initialValue: '',\n        principalAtribute: 'name',\n        secondaryAtribute: '',\n        optionalMultipleAtribute: '',\n        secondaryQuery: null,\n        placeholder_value: 'Buscar / Crear items...',\n        searchRoute: '',\n        res_name: 'item',\n        optionalInputFunction_res: { 0: 'name' }\n      },\n      optIndex: '',\n      priceSeted: '',\n      currencyScope: {}\n    };\n  },\n\n  created() {\n    // AUTOCOMPLETE CONFIG\n    this.acomplete.searchRoute = api + '/items/find/';\n\n    let params = {\n      parent: this.getItem._id,\n      type: 'item'\n    };\n\n    this.loading = true;\n    if (this.item._id) {\n      this.getAllComments(params).then(res => {\n        this.loading = false;\n      });\n    }\n  },\n  mounted() {\n    this.isMobile = isMobile;\n    this.acomplete.initialValue = this.getItem.name;\n    this.getUserItems().then(res => {});\n    this.localQuantity = !isNaN(this.getItem.quantity)\n      ? this.getItem.quantity\n      : parseInt(this.getItem.quantity);\n\n    this.optIndex = 0;\n  },\n\n  methods: {\n    // ACTIONS\n    ...mapActions({\n      postItem: 'items/postItem',\n      getAllComments: 'comments/getAllComments',\n      postComment: 'comments/postComment',\n      getUserItems: 'items/getUserItems',\n      findItem: 'items/findItem'\n    }),\n    ...mapMutations({\n      setItem: 'items/SET_ITEM',\n      setIncome: 'incomes/SET_INCOME',\n      setComment: 'comments/SET_COMMENT',\n      cleanItem: 'items/CLEAN',\n      setGlobalsCreate: 'items/SET_GLOBALS_CREATE',\n      handleItemDialog: 'HANDLE_ITEM_DIALOG',\n      handleCheckbox: 'items/HANDLE_CHECKBOX',\n      handleSelections: 'items/HANDLE_SELECTIONS'\n    }),\n\n    updateItem(event) {\n      if (this.getSelectedItemsAdd.length > 0) {\n        let obj = {\n          attr: event.name,\n          value: event.value\n        };\n        this.setGlobalsCreate(obj);\n      } else {\n        let obj = {\n          attr: event.name,\n          value: event.value\n        };\n        this.setItem(obj);\n\n        if (event.name == 'item') {\n          // this.sheet = true;\n          this.$toasted.show('¡Seleccionaste ' + event.value.name, {\n            type: 'success'\n          });\n        }\n      }\n    },\n    closeItemDialog() {\n      this.handleItemDialog(false);\n    },\n\n    createItem(term) {\n      if (term != '') {\n        let obj = {\n          name: term\n        };\n        this.postItem(obj).then(res => {\n          this.$toasted.show('¡Item creado con exito!', {\n            type: 'success'\n          });\n          // this.sheet = true;\n        });\n      } else {\n        this.$toasted.show('Debe escribir nombre del item!', {\n          type: 'warning'\n        });\n      }\n    },\n\n    updateComment(event) {\n      this.setComment(event);\n    },\n    newComment() {\n      let params = {\n        parent: this.getItem._id,\n        type: 'item',\n        txt: this.COMMENT\n      };\n      this.postComment(params).then(res => {});\n    },\n    handleItem(index) {\n      this.optIndex = index;\n      this.handleSelections({ var: 'selectedItemsAdd', index: index });\n    },\n\n    changeQuantity(type) {\n      if (this.localQuantity >= 0) {\n        type == 'add'\n          ? (this.localQuantity = this.localQuantity + 1)\n          : (this.localQuantity = this.localQuantity - 1);\n      } else {\n        this.localQuantity = 0;\n      }\n    },\n    setPrice(price) {\n      price == undefined ? '' : price;\n      console.log(price);\n      this.updateItem({ name: 'price', value: price });\n      this.priceSeted = price;\n    }\n  },\n  computed: {\n    ...mapGetters({\n      getItem: 'items/getItem',\n      getIncome: 'incomes/getIncome',\n      getComments: 'comments/getComments',\n      getComment: 'comments/getComment',\n      getIsOutcome: 'getIsOutcome',\n      getUserLastItems: 'items/getUserLastItems',\n      getSelectedItems: 'items/getSelectedItems',\n      getSelectedItemsAdd: 'items/getSelectedItemsAdd',\n      getShowDialogIncome: 'getShowDialogIncome',\n      getGlobalItemVars: ' items/getGlobalItemVars',\n      getCurrencyConfig: 'getCurrencyConfig'\n    }),\n\n    COMMENTS: function(val) {\n      return this.getComments;\n    },\n    COMMENT: function(val) {\n      return this.getComment;\n    },\n\n    PRICES(val) {\n      return {\n        last:\n          this.getUserLastItems.length > 0\n            ? this.getUserLastItems[this.optIndex].lastPrice\n            : 0,\n        stock:\n          this.getUserLastItems.length > 0\n            ? this.getUserLastItems[this.optIndex].price\n            : 0\n      };\n    }\n  },\n\n  watch: {\n    getItem: {\n      handler(val) {\n        this.acomplete.initialValue = val.name;\n      },\n      deep: true\n    },\n    localQuantity: function(val) {\n      let number = val < 0 ? 0 : val;\n\n      if (this.getSelectedItemsAdd.length > 0) {\n        this.setGlobalsCreate({ attr: 'quantity', value: parseInt(number) });\n      } else {\n        this.setItem({\n          attr: 'quantity',\n          value: parseInt(number)\n        });\n      }\n    },\n\n    getSelectedItemsAdd(val) {\n      this.sheet = this.getSelectedItemsAdd.length > 0 ? true : false;\n    }\n  }\n};\n</script>\n<style>\n.md-content {\n  max-width: 400px;\n  max-height: 100vh !important;\n  overflow: auto;\n}\n.btn {\n  width: 100%;\n}\n#textField /deep/ input {\n  background-color: transparent;\n  border: none;\n  border-bottom: none;\n  border-radius: 0;\n  outline: none;\n  height: 100%;\n  width: 100%;\n  font-size: 16px;\n  margin: 0;\n  margin-top: 10px;\n  padding: 0;\n  -webkit-box-shadow: none;\n  box-shadow: none;\n  -webkit-box-sizing: content-box;\n  box-sizing: content-box;\n  -webkit-transition: none;\n  transition: none;\n  transition: none;\n  transition: none;\n  max-height: none !important;\n}\n\n.v-input__slot {\n  margin: 0;\n}\n.v-input .v-text-field {\n  margin: 0 !important;\n  padding: 0 !important;\n}\n\n.v-toolbar__content {\n  padding: 0;\n  height: 100% !important;\n}\n\n.v-input {\n  margin: 0 !important;\n  padding: 0 !important;\n}\n\n.search {\n  max-width: 600px;\n}\n\n@media only screen and (max-width: 599px) {\n  .v-bottom-sheet.v-dialog.v-bottom-sheet--inset {\n    margin-bottom: 11%;\n    box-shadow: none;\n  }\n}\n</style>\n"]}]}