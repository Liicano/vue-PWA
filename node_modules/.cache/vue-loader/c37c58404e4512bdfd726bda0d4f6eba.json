{"remainingRequest":"/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/desarrollo/Escritorio/unabasev4/src/pages/auth/Restart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/desarrollo/Escritorio/unabasev4/src/pages/auth/Restart.vue","mtime":1551299428344},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/desarrollo/Escritorio/unabasev4/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { LoginCard } from '@/components';\nimport { mapGetters, mapActions } from 'vuex';\nimport Vue from 'vue';\nimport notify from '../../assets/js/notify.js';\nimport lang from '../../languages';\n// import Notifications from '../../../components/NotificationPlugin';\n// import api from '../../../config/api';\n\n// Vue.use(Notifications);\n// import axios from 'axios'\nexport default {\n  name: 'Restart',\n  components: {\n    LoginCard\n  },\n  data() {\n    return {\n      id: null,\n      password1: null,\n      password2: null\n    };\n  },\n  computed: {},\n  methods: {\n    ...mapActions({\n      setPassword: 'users/setPassword'\n    }),\n    restart() {\n      this.setPassword({\n        password: this.password1,\n        newPassword: this.password2,\n        id: this.id\n      })\n        .then(res => {\n          this.$router.push('/');\n        })\n        .catch(err => {\n          this.$toasted.show('' + lang.user.restartPasswordFail + '');\n        });\n    }\n  },\n  mounted() {\n    this.id = this.$route.query.id;\n  }\n};\n",{"version":3,"sources":["Restart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Restart.vue","sourceRoot":"src/pages/auth","sourcesContent":["<template>\n  <div class=\"md-layout text-center\">\n    <div class=\"md-layout-item md-size-33 md-medium-size-50 md-small-size-70 md-xsmall-size-100\">\n      <login-card header-color=\"green\">\n        <md-field class=\"md-form-group mdl-typography--text-center\" slot=\"title\">\n          <div class=\"row\">\n            <img src=\"../../assets/img/logo_transparente.png\" alt>\n          </div>\n        </md-field>\n\n        <center slot=\"inputs\">\n          <md-field class=\"md-form-group\">\n            <md-input type=\"password\" v-model=\"password1\" :placeholder=\"lg.user.password\"></md-input>\n          </md-field>\n          <md-field class=\"md-form-group\">\n            <md-input type=\"password\" v-model=\"password2\" :placeholder=\"lg.user.passwordConfirm\"></md-input>\n          </md-field>\n          <md-button\n            slot=\"footer\"\n            class=\"md-simple md-success md-lg\"\n            @click=\"restart\"\n          >{{ lg.user.changePassword }}</md-button>\n        </center>\n      </login-card>\n    </div>\n  </div>\n</template>\n<script>\nimport { LoginCard } from '@/components';\nimport { mapGetters, mapActions } from 'vuex';\nimport Vue from 'vue';\nimport notify from '../../assets/js/notify.js';\nimport lang from '../../languages';\n// import Notifications from '../../../components/NotificationPlugin';\n// import api from '../../../config/api';\n\n// Vue.use(Notifications);\n// import axios from 'axios'\nexport default {\n  name: 'Restart',\n  components: {\n    LoginCard\n  },\n  data() {\n    return {\n      id: null,\n      password1: null,\n      password2: null\n    };\n  },\n  computed: {},\n  methods: {\n    ...mapActions({\n      setPassword: 'users/setPassword'\n    }),\n    restart() {\n      this.setPassword({\n        password: this.password1,\n        newPassword: this.password2,\n        id: this.id\n      })\n        .then(res => {\n          this.$router.push('/');\n        })\n        .catch(err => {\n          this.$toasted.show('' + lang.user.restartPasswordFail + '');\n        });\n    }\n  },\n  mounted() {\n    this.id = this.$route.query.id;\n  }\n};\n</script>\n\n<style>\n.page-header.header-filter.restart-page {\n  background-image: url('../../../public/img/restart.jpg') !important;\n}\n</style>"]}]}